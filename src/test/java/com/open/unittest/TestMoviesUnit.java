package com.open.unittest;

import static org.junit.Assert.assertTrue;
import static org.testng.Assert.assertEquals;

//import static org.junit.Assert.assertTrue;
//import static org.testng.Assert.assertEquals;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.bson.types.ObjectId;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.junit.Test;
//import org.junit.Test;
//import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.opentest.service.Movies;
import com.opentest.service.OpenTestApplication;

@RunWith(SpringRunner.class)
@AutoConfigureMockMvc
@SpringBootTest(classes = OpenTestApplication.class)
public class TestMoviesUnit {
	static ArrayList<String> postedIds=new ArrayList<String>();


	@Autowired
	private MockMvc mvc;

	@Test
	public void test1AddMovies() throws Exception {
		String uri = "/restapi/movies";
		List<Movies> moviesList = new ArrayList<Movies>();
		JSONParser parser = new JSONParser();
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			File resource = new ClassPathResource(
					"input.json").getFile();
			JSONArray jSONArray = (JSONArray) parser.parse(new FileReader(resource.getAbsolutePath()));
			int objCount=jSONArray.size();
			for(int i=0; i<objCount; i++) {
				Movies movies = objectMapper.readValue(jSONArray.get(i).toString(), Movies.class);
				ObjectId id = ObjectId.get();
				movies.set_id(id);
				moviesList.add(movies);
			}
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		} catch (IOException e1) {
			e1.printStackTrace();
		} catch (ParseException e1) {
			e1.printStackTrace();
		}

		for(Movies movies : moviesList) {
			String inputJson  = objectMapper.writeValueAsString(movies);

			MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.post(uri)
					.contentType(MediaType.APPLICATION_JSON_VALUE).content(inputJson)).andReturn();

			int status = mvcResult.getResponse().getStatus();
			assertEquals(status, 200);

			JSONObject json = (JSONObject) new JSONParser().parse(mvcResult.getResponse().getContentAsString());
			System.out.println("posted data: "+json);
			System.out.println("Id: "+json.get("_id"));
			assertTrue(StringUtils.isAlphanumeric((CharSequence) json.get("_id")));
			postedIds.add((String) json.get("_id"));

		}
		System.out.println("");

	}

	@Test
	public void test2GetMovies() throws Exception {
		String uri = "/restapi/movies";
		MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.get(uri)
				.accept(MediaType.APPLICATION_JSON_VALUE)).andReturn();

		int status = mvcResult.getResponse().getStatus();
		assertEquals(200, status);
	}

	@Test
	public void test3GetMoviesById() throws Exception {
		System.out.println("Size array : "+postedIds.size());
		assertTrue(postedIds.size()>0);
		for(String id: postedIds) {
			String uri = "/restapi/movies/"+id;
			MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.get(uri)
					.accept(MediaType.APPLICATION_JSON_VALUE)).andReturn();

			int status = mvcResult.getResponse().getStatus();
			assertEquals(200, status);

			JSONObject json = (JSONObject) new JSONParser().parse(mvcResult.getResponse().getContentAsString());

			assertEquals(id, json.get("_id"));
		}
	}

	@Test
	public void test4DeleteMoviesById() throws Exception {
		assertTrue(postedIds.size()>0);
		for(String id: postedIds) {
			String uri = "/restapi/movies/"+id;
			MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.delete(uri)
					.accept(MediaType.APPLICATION_JSON_VALUE)).andReturn();

			int status = mvcResult.getResponse().getStatus();
			assertEquals(200, status);

		}
	}


}
