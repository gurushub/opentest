package com.open.unittest;

import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.testng.Assert.assertEquals;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.core.io.ClassPathResource;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.opentest.service.Movies;
import com.opentest.service.MoviesRESTController;
import com.opentest.service.Repository;

public class UnitTest {
	@InjectMocks
	MoviesRESTController moviesRESTController;

	@Mock
	Repository repository;

	@Before
	public void init() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void createEmployeeTest()
	{
		List<Movies> moviesList = new ArrayList<Movies>();
		JSONParser parser = new JSONParser();
		try {
			File resource = new ClassPathResource(
					"input.json").getFile();
			System.out.println("Input json read from file");
			JSONArray jSONArray = (JSONArray) parser.parse(new FileReader(resource.getAbsolutePath()));
			int objCount=jSONArray.size();
			for(int i=0; i<objCount; i++) {
				JSONObject jsonObeject = (JSONObject) jSONArray.get(i);
				System.out.println("Json Mapped data: "+jsonObeject.toJSONString());
				moviesList.add(new ObjectMapper().readValue(jsonObeject.toJSONString(), Movies.class));
				System.out.println("Movie "+i+" added to moviesList");
			}
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		} catch (IOException e1) {
			e1.printStackTrace();
			System.out.println("Error getting file input.json "+e1.getMessage());
		} catch (ParseException e1) {
			e1.printStackTrace();
			System.out.println("Error parsing file input.json "+e1.getMessage());
		}

		for(Movies movie : moviesList) {
			moviesRESTController.createMovie(movie);
			verify(repository, times(1)).save(movie);
		}
	}

	@Test
	public void getAllEmployeesTest()
	{ 	
		List<Movies> moviesList = new ArrayList<Movies>();
		JSONParser parser = new JSONParser();
		try {
			File resource = new ClassPathResource(
					"input.json").getFile();
			System.out.println("Input json read from file");
			JSONArray jSONArray = (JSONArray) parser.parse(new FileReader(resource.getAbsolutePath()));
			int objCount=jSONArray.size();
			for(int i=0; i<objCount; i++) {
				JSONObject jsonObeject = (JSONObject) jSONArray.get(i);
				System.out.println("Json Mapped data: "+jsonObeject.toJSONString());
				moviesList.add(new ObjectMapper().readValue(jsonObeject.toJSONString(), Movies.class));
				System.out.println("Movie "+i+" added to moviesList");
			}
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		} catch (IOException e1) {
			e1.printStackTrace();
			System.out.println("Error getting file input.json "+e1.getMessage());
		} catch (ParseException e1) {
			e1.printStackTrace();
			System.out.println("Error parsing file input.json "+e1.getMessage());
		}

		when(repository.findAll()).thenReturn(moviesList);
		//test
		List<Movies> empList = moviesRESTController.getAllmovies();

		assertEquals(2, empList.size());
		verify(repository, times(1)).findAll();

	}
}
