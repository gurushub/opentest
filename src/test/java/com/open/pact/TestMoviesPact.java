package com.open.pact;




import static org.testng.Assert.assertEquals;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.junit.Rule;
import org.junit.Test;

import au.com.dius.pact.consumer.Pact;
import au.com.dius.pact.consumer.PactProviderRuleMk2;
import au.com.dius.pact.consumer.PactVerification;
import au.com.dius.pact.consumer.dsl.DslPart;
import au.com.dius.pact.consumer.dsl.PactDslJsonArray;
import au.com.dius.pact.consumer.dsl.PactDslWithProvider;
import au.com.dius.pact.model.RequestResponsePact;

public class TestMoviesPact {

	@Rule
	public PactProviderRuleMk2 mockProvider = new PactProviderRuleMk2("OT_Provider", "localhost", 8080, this);
	@Pact(provider="OT_Provider", consumer="OT_Consumer")
	public RequestResponsePact createFragment(PactDslWithProvider builder) {
		
		Map<String, String> headers = new HashMap<>();
		headers.put("Content-Type", "application/json;charset=UTF-8");
		
		final DslPart body = new PactDslJsonArray()
				.object()
				.numberType("Runtime")
				.stringMatcher("_id", "^[a-zA-Z0-9]+$", "5d11d2b0e1a4f465cd66890f")
				.stringValue("Type", "Movies")
	            .closeObject()
	            .asArray();
		
		return builder.uponReceiving("a request for get movies")
				.path("/movies/")
				.method("GET")

				.willRespondWith()
				.headers(headers)
				.status(200)	
				.body(body).toPact();
		
		
	}

	@Test
	@PactVerification("OT_Provider")
	public void runTest() throws IOException, ParseException {
		System.out.println("myUrl "+mockProvider.getConfig().url());
		DummyConsumer restClient = new DummyConsumer(mockProvider.getConfig().url());
		String responseStr = restClient.getMovies();
		System.out.println("responseStr: "+responseStr);
		JSONArray jsonArr = (JSONArray) new JSONParser().parse(responseStr);
		JSONObject jsonObj = (JSONObject) jsonArr.get(0);
		assertEquals(jsonObj.get("Type"), "Movies");

	}

}
