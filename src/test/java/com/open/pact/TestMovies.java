package com.open.pact;



import static junit.framework.TestCase.assertEquals;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Rule;
import org.junit.Test;

import com.fasterxml.jackson.databind.ObjectMapper;

import au.com.dius.pact.consumer.Pact;
import au.com.dius.pact.consumer.PactProviderRuleMk2;
import au.com.dius.pact.consumer.PactVerification;
import au.com.dius.pact.consumer.dsl.DslPart;
import au.com.dius.pact.consumer.dsl.PactDslJsonArray;
import au.com.dius.pact.consumer.dsl.PactDslWithProvider;
import au.com.dius.pact.model.RequestResponsePact;

public class TestMovies {

	@Rule
	public PactProviderRuleMk2 mockProvider = new PactProviderRuleMk2("Foo_Provider", "localhost", 8080, this);
	@Pact(provider="Foo_Provider", consumer="Foo_Consumer")
	public RequestResponsePact createFragment(PactDslWithProvider builder) {
		Map<String, String> headers = new HashMap<>();
		headers.put("Content-Type", "application/json;charset=UTF-8");
		final DslPart body = new PactDslJsonArray()
				.object()
				.numberType("Runtime")
				.stringMatcher("_id", "^[a-zA-Z0-9]+$", "5d11d2b0e1a4f465cd66890f")
				.stringValue("Type", "Movies")
	            .closeObject()
	            .asArray();
		
		return builder.uponReceiving("a request for Foos")
				.path("/restapi/movies/")
				.method("GET")

				.willRespondWith()
				.headers(headers)
				.status(200)	
				.body(body).toPact();
		
		
	}

//	@Test
//	@PactVerification("Foo_Provider")
//	public void runTest() throws IOException {
//		System.out.println("myUrl "+mockProvider.getConfig().url());
//		DummyConsumerOpenTest restClient = new DummyConsumerOpenTest(mockProvider.getConfig().url());
//		String responseStr = restClient.getMovies();
//		System.out.println("responseStr: "+responseStr);
//		ObjectMapper objectMapper = new ObjectMapper();
//		final List response = objectMapper.readValue(responseStr, List.class);
//		Map map = (HashMap)response.get(0);
//		assertEquals(map.get("Type"), "Movies");
//	}	

}
