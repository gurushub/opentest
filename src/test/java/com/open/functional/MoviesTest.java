package com.open.functional;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.bson.types.ObjectId;
import org.json.simple.JSONArray;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.core.io.ClassPathResource;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.open.base.BaseTest;
import com.opentest.restassured.RestValidator;
import com.opentest.service.Movies;

import io.restassured.response.Response;


public class MoviesTest extends BaseTest {
	ArrayList<String> createdIds = new ArrayList<String>();
	@Test(priority = 1)
	public void verify_if_endpoint_available() throws IOException {
		Response response = restExecutor.apiGetRequest(requestSpecBuilder.build(), "movies");
		new RestValidator(response).expectCode(200); 
	}

	//This method will add two movies from json file(resource folder)
	@Test(priority = 2)
	public void verify_posting_movies_successful() throws IOException {
		List<Movies> moviesList = new ArrayList<Movies>();
		JSONParser parser = new JSONParser();
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			File resource = new ClassPathResource(
					"input.json").getFile();
			JSONArray jSONArray = (JSONArray) parser.parse(new FileReader(resource.getAbsolutePath()));

			int objCount=jSONArray.size();
			for(int i=0; i<objCount; i++) {
				Movies movies = objectMapper.readValue(jSONArray.get(i).toString(), Movies.class);
				ObjectId id = ObjectId.get();
				System.out.println("objectId: "+id.toHexString());
				
				movies.set_id(id);
				moviesList.add(movies);
			}
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		} catch (IOException e1) {
			e1.printStackTrace();
		} catch (ParseException e1) {
			e1.printStackTrace();
		}

		for(Movies movies : moviesList) {
			String jsonStr = new ObjectMapper().writeValueAsString(movies);
			System.out.println("jsonStr: "+jsonStr);
			Response response = restExecutor.apiPostRequest(requestSpecBuilder.build(), jsonStr, "movies");
			System.out.println("Created id: "+response.jsonPath().get("_id"));
			createdIds.add(response.jsonPath().get("_id"));
			new RestValidator(response).expectCode(200); 
		}
	}
	
	//This method is used to get all movies
	@Test(priority = 3)
	public void verify_retrieval_all_posted_movies() throws IOException {
		Response response = restExecutor.apiGetRequest(requestSpecBuilder.build(), "movies");
		System.out.println(response.getBody().asString().contains("Title"));
		Assert.assertEquals(response.getBody().asString().contains("Title"), true);
		new RestValidator(response).expectCode(200); 
	}
	
	@Test(priority = 4)
	public void verify_retrieval_single_movie_byID() {
		for(String id: createdIds) {
			Response response = restExecutor.apiGetRequest(requestSpecBuilder.build(), "movies"+"/"+id);
			Assert.assertEquals(response.jsonPath().get("_id"), id);
		}
	}
}
